package io.github.mikybars.mill.openapi

import ch.qos.logback.classic.{Level, LoggerContext}
import mill.*
import mill.javalib.JavaModule
import org.openapitools.codegen.DefaultGenerator
import org.openapitools.codegen.config.CodegenConfigurator
import org.slf4j.{Logger, LoggerFactory}

import scala.jdk.CollectionConverters.*

trait OpenApiModule extends JavaModule {

  trait OpenApiConfig extends mill.Module {
    /** The Open API 2.0/3.x specification location. */
    def inputSpec: T[PathRef]

    /** The name of the generator which will handle codegen. */
    def generatorName: T[String]

    /** Package for generated api classes. */
    def apiPackage: T[String]

    /** Package for generated model classes. */
    def modelPackage: T[String]

    /** Suffix that will be appended to all model names. */
    def modelNameSuffix: T[String]

    /** Sets additional properties that can be referenced by the mustache templates. */
    def additionalProperties: T[Map[String, String]] = Map.empty[String, String]

    /** A task which generates the desired code. */
    def generate: T[PathRef] = Task {
      val configurator = CodegenConfigurator()
        .setInputSpec(inputSpec().path.toString())
        .setApiPackage(apiPackage())
        .setModelPackage(modelPackage())
        .setModelNameSuffix(modelNameSuffix())
        .setOutputDir(Task.dest.toString())
        .setGeneratorName(generatorName())
        .setAdditionalProperties(additionalProperties().asJava)

      /* Reduce the verbosity of the logs generated by the OpenApi lib */
      val loggerFactory = LoggerFactory.getILoggerFactory.asInstanceOf[LoggerContext]
      loggerFactory.getLogger(Logger.ROOT_LOGGER_NAME).setLevel(Level.WARN)

      DefaultGenerator().opts(configurator.toClientOptInput).generate()
      Task.log.info(s"Successfully generated code to ${Task.dest}")
      PathRef(Task.dest)
    }
  }

}